name: CI Build and Test

on:
  pull_request:
    branches:
      - main
      - 'feature/**'
      - 'release/**'
  merge_group:
  workflow_dispatch:

# Cancel in-progress run when a pull request is updated
# Code taken from:
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: "18.17.1"
  PYTHON_VERSION: "3.11"
  RUST_TOOLCHAIN_VERSION: "1.73"
  RUST_TOOLCHAIN_COMPONENTS: rustfmt clippy

jobs:
  format:
    name: Format
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - name: Setup rust toolchain
        uses: ./.github/actions/toolchains/rust
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          components: ${{ env.RUST_TOOLCHAIN_COMPONENTS }}
      - name: Check Formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - name: Setup rust toolchain
        uses: ./.github/actions/toolchains/rust
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          components: ${{ env.RUST_TOOLCHAIN_COMPONENTS }}
      - uses: Swatinem/rust-cache@v2
      - name: Clippy Lints
        run: cargo clippy --all-targets --all-features -- -D warnings

  benches:
    name: Benches
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - name: Setup rust toolchain
        uses: ./.github/actions/toolchains/rust
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          components: ${{ env.RUST_TOOLCHAIN_COMPONENTS }}
      - uses: Swatinem/rust-cache@v2
      - name: cargo bench
        run: cargo bench --workspace

  web-check:
    name: Check web files
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: npm install
        run: npm install
      - name: npm check
        run: npm run check

  build:
    name: Build and test
    strategy:
      matrix:
        os: [windows-latest, ubuntu-20.04, macos-latest]

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - name: Setup rust toolchain
        uses: ./.github/actions/toolchains/rust
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          components: ${{ env.RUST_TOOLCHAIN_COMPONENTS }}
      - name: Add additional Rust targets
        run: |
          rustup target add aarch64-apple-darwin
        if: matrix.os == 'macos-latest'
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - name: Prereqs
        run: python ./prereqs.py --install
      - name: Build and Test
        run: python ./build.py --no-check
      # Now we need to prepare the artifacts for upload.
      # Run auditwheel on Linux
      - name: Run auditwheel for Linux Wheels
        run: |
          python -m pip install auditwheel patchelf
          ls target/wheels
          ls target/wheels/*x86_64*.whl | xargs auditwheel show
          ls target/wheels/*x86_64*.whl | xargs auditwheel repair --wheel-dir ./target/wheels/ --plat manylinux_2_31_x86_64
          rm target/wheels/*-linux_x86_64.whl
          ls target/wheels
        if: matrix.os == 'ubuntu-20.04'
      # publish wheels for active target
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact-wheels-${{ matrix.os }}
          if-no-files-found: error
          path: |
            ./target/wheels/*.whl
      # Publish vsix for VSCode if on linux
      - name: Create VSCode Ext Package
        working-directory: ./vscode
        run: |
          npm install -g @vscode/vsce
          vsce package
        if: matrix.os == 'ubuntu-20.04'
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact-vsix
          if-no-files-found: error
          path: |
            ./vscode/*.vsix
        if: matrix.os == 'ubuntu-20.04'
      # Create npm package
      - name: Create npm package
        working-directory: ./npm
        run: |
          mkdir -p ../target/npm
          npm pack --pack-destination ../target/npm
        if: matrix.os == 'ubuntu-20.04'
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact-npm
          if-no-files-found: error
          path: |
            ./target/npm
        if: matrix.os == 'ubuntu-20.04'
  integration-tests:
    name: Integration tests
    if: ${{ ! github.event.pull_request }}
    timeout-minutes: 15
    strategy:
      matrix:
        os: [windows-latest, ubuntu-20.04, macos-latest]

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - name: Setup rust toolchain
        uses: ./.github/actions/toolchains/rust
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          components: ${{ env.RUST_TOOLCHAIN_COMPONENTS }}
      - name: Add additional Rust targets
        run: |
          rustup target add aarch64-apple-darwin
        if: matrix.os == 'macos-latest'
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: Swatinem/rust-cache@v2
      - name: Prereqs
        run: python ./prereqs.py --install
      - name: Run integration tests
        run: python ./build.py --no-check --no-test --wasm --npm --vscode --integration-tests
  python-compat-checks:
    needs: [build]
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        pyver: ['3.9', '3.10', '3.11']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "true"
      - name: Setup rust toolchain
        uses: ./.github/actions/toolchains/rust
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          components: ${{ env.RUST_TOOLCHAIN_COMPONENTS }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-wheels-*
          path: ./target/wheels
          merge-multiple: true
      - name: Run python compatibility checks
        run: |
          ls -la ./target/wheels
          python ./build.py --no-check --no-check-prereqs --artifact-tests